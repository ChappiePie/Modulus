plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = "${mod_version}"
group = 'chappie.modulus'
archivesBaseName = 'modulus'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

jarJar.enable()

mixin {
    add sourceSets.main, "modulus.refmap.json"
    config 'modulus.mixins.json'

    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true
    quiet
}

minecraft {
    mappings channel: 'parchment', version: "2024.04.14-1.20.4"
    //mappings channel: 'parchment', version: "2023.03.12-${minecraft_version}"
    //mappings channel: 'official', version: '${minecraft_version}'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'modulus'
        }
        client {}
        clientWithCredentials {
            parent runs.client
            args '--username', 'ChappiePie', '--uuid', '8464971c-f5ac-4eb5-87aa-511a0eec65f6'
        }
        server {}
        data {
            args '--mod', 'modulus', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    /*implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }*/

    implementation(fg.deobf("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}"))

    /*implementation(fg.deobf(jarJar("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}"){
                jarJar.ranged(it, "[${geckolib_version},)")
            }))*/
    implementation(fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}"))
    compileOnly("com.eliotlash.mclib:mclib:20")

    if (System.getProperty('idea.sync.active') != 'true') {
        //annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

jar {
    manifest {
        attributes([
                "Specification-Title"     : "modulus",
                "Specification-Vendor"    : "modulussareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "modulussareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.build.dependsOn tasks.jarJar

reobf.create('jarJar')

afterEvaluate {
    tasks.jarJar {
        archiveClassifier = ''
    }
    jar {
        archiveClassifier = 'partial'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact tasks.jarJar
            artifactId = "modulus"
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}